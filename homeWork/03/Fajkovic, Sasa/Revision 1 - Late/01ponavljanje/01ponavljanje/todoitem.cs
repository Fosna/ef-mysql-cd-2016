//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity;

namespace _01ponavljanje
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    public partial class todoitem
    {
        // Code review: Consider extracting static properties and methods to TodoItemRepository class. Should do it for every database management operation like TodoApp.SetDone(). Static database context isn't a good idea in general. However it works ok if there is only one table in database.
        private static TodoEntities db;

        public todoitem()
        {
            db = new TodoEntities();
        }


        public int Id { get; set; }
        public string Description { get; set; }
        public System.DateTime TimeCreated { get; set; }
        public Nullable<System.DateTime> TimeSetToDone { get; set; }
        public Nullable<System.DateTime> TimeDeactivated { get; set; }

        public static void undoneTodoItem(todoitem ti)
        {
            // Code review. There is no change in database if actual value isn't set.
            ti.TimeSetToDone = null;

            db.todoitem.Attach(ti);

            var entry = db.Entry(ti);
            entry.State = EntityState.Modified;

            entry.Property(e => e.TimeSetToDone).IsModified = true;
            db.SaveChanges();

            Console.WriteLine("Item {0} with an ID {1} is now set to undone.", ti.Description, ti.Id);

        }

        public static void removeTodoItem(todoitem ti)
        {
            // Code review: That's beyond basic EF update technique. Please present it during next lecture.

            ti.TimeDeactivated = DateTime.Now;
            db.todoitem.Attach(ti);

            var entry = db.Entry(ti);
            entry.State = EntityState.Modified;

            entry.Property(e => e.TimeDeactivated).IsModified = true;
            db.SaveChanges();

            Console.WriteLine("Item {0} with an ID {1} has been removed.", ti.Description, ti.Id);


        }
    }
}
